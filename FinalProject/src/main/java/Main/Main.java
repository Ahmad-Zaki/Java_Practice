package Main;

import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

public class Main {

	public static void main(String[] args) {
		//omit the log generated by apache spark from the output.
    	Logger.getLogger ("org").setLevel (Level.ERROR);
    	Logger.getLogger("akka").setLevel(Level.OFF);
    	Logger.getLogger("org.apache.spark").setLevel(Level.OFF);
    	Logger.getLogger("org.spark-project").setLevel(Level.OFF);
    	
		
		//Create an object from JobsDAO that creates a Spark session
		JobsDAO jobsDAO = new JobsDAO("Wuzzuf Jobs dataset Analysis","local[12]");
		
		
		// Set reader options as a map object:
		Map<String,String> readerOptions = new HashMap<String, String>();
    	readerOptions.put("header", "true");	//set the first row as the header.
    	readerOptions.put("delimiter", ",");	//set the delimiter as the comma ",".
    	
    	
    	//Read the dataset from CSV file:
    	Dataset<Row> jobs = jobsDAO.CSVtoDataset("src\\main\\resources\\Wuzzuf_Jobs.csv",readerOptions);
    	//Display the first few rows of the data:
    	jobs.show(10,false);
    	
    	
    	//Display the structure the summary of the dataset
    	System.out.println("====================Structure of the dataset====================");
    	jobs.printSchema();
    	jobs.describe(jobs.columns()).show(false);
    	System.out.println ("Number of entries= " + jobs.count());
    	
    	//dropping duplicate rows and null values:
    	Dataset<Row> jobsCleaned = jobsDAO.cleanJobs();
    	System.out.println ("\nNumber of entries after cleaning= " + jobsCleaned.count());
    	
    	
    	//count the jobs for each company and sort them in descending order:
    	Dataset<Row> companiesCount = jobsDAO.countAttribute("Company");
    	//Graph the the top 10 companies in a pie chart
    	Graph.pieGraph(companiesCount, "Number of jobs per company");
    	
    	
    	//Count each job and sort them in descending order:
    	Dataset<Row> jobsCount = jobsDAO.countAttribute("Title");
    	//Graph the top 10 titles in a bar chart:
    	Graph.barGraph(jobsCount, "Most populart job titles", "Title", "demand", "demand per title");
    	
    	
    	Dataset<Row> locationCount = jobsDAO.countAttribute("Location");
    	//Graph the top 10 locations in a bar chart:
    	Graph.barGraph(locationCount, "Most populart job locations", "Area", "jobs", "jobs per area");
    	
    	
    	//Print each skill with its count:
    	jobsDAO.skillCount();
	}

}
